/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {100,32}, {105,110}, {97,114}, {116,105}, {101,114}, {37,115}, {110,111}, {97,110}, {135,130}, {114,101}, {101,110}, {97,108},
  {117,110}, {111,114}, {34,137}, {146,34}, {121,32}, {138,129}, {115,105}, {115,116}, {100,101}, {97,116}, {101,132}, {109,142}, {32,147}, {116,104}, {41,10}, {109,98},
  {117,115}, {114,97}, {144,99}, {145,32}, {98,108}, {162,140}, {102,165}, {101,120}, {97,32}, {116,121}, {99,139}, {118,143}, {111,108}, {169,112}, {170,149}, {115,121},
  {175,159}, {136,32}, {134,161}, {176,172}, {115,10}, {103,32}, {116,111}, {115,150}, {103,117}, {105,132}, {184,155}, {134,186}, {101,131}, {160,129}, {97,164}, {109,189},
  {102,133}, {101,10}, {44,32}, {171,185}, {99,104}, {105,131}, {166,32}, {133,195}, {104,97}, {111,102}, {117,108}, {99,116}, {98,128}, {97,140}, {178,148}, {110,32},
  {109,97}, {101,100}, {99,111}, {167,112}, {99,130}, {37,131}, {118,134}, {179,156}, {201,32}, {105,190}, {214,217}, {109,101}, {111,112}, {137,10}, {130,32}, {99,108},
  {118,128}, {187,129}, {152,192}, {102,105}, {119,105}, {97,131}, {173,128}, {220,136}, {116,97}, {100,105}, {97,115}, {108,128}, {156,10}, {109,153}, {151,153}, {218,128},
  {139,132}, {215,158}, {200,224}, {40,241}, {116,117}, {150,122}, {212,151}, {34,32}, {133,32}, {138,32}, {139,32}, {143,32}, {157,32}, {133,181}, {110,97}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method or property %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style type declarations\n",
/*121*/  "cannot specify array dimensions on both type and name\n",
/*122*/  "expected type expression\n",
/*123*/  "fully-qualified name \"%s\" is too long, would be truncated to \"%s\"\n",
/*124*/  "unexpected token, expected method or property\n",
/*125*/  "expected \"native\", \"get\", or \"set\"\n",
/*126*/  "%s for %s already exists\n",
/*127*/  "property getters cannot accept extra arguments\n",
/*128*/  "%s must have the same return type as property %s (%s)\n",
/*129*/  "cannot mix methodmaps and classes with inheritance\n",
/*130*/  "cannot coerce functions to values\n",
/*131*/  "cannot coerce object type %s to non-object type %s\n",
/*132*/  "cannot coerce non-object type %s to object type %s\n",
/*133*/  "cannot coerce unrelated object types %s and %s\n",
/*134*/  "type mismatch (%s and %s)\n",
/*135*/  "cannot use an object in a multi-tag selector\n",
/*136*/  "arrays are not supported as return types\n",
/*137*/  "cannot mix reference and array types\n",
/*138*/  "const was specified twice\n",
/*139*/  "could not find type \"%s\"\n",
/*140*/  "new-style array types cannot specify dimension sizes as part of their type\n",
/*141*/  "natives, forwards, and public functions cannot return arrays\n",
/*142*/  "invalid type declaration\n",
/*143*/  "new-style declarations should not have \"new\"\n",
/*144*/  "void cannot be used as a variable type\n",
/*145*/  "invalid type expression\n",
/*146*/  "#pragma newdecls must be required or optional\n",
/*147*/  "new-style declarations are required\n",
/*148*/  "cannot assign null to a non-nullable type\n",
/*149*/  "no getter found for property %s\n",
/*150*/  "setter must take exactly one extra argument with type %s\n",
/*151*/  "setter must return void\n",
/*152*/  "no setter found for property %s\n",
/*153*/  "cannot use non-public functions as callbacks\n",
/*154*/  "cannot assign INVALID_FUNCTION to a non-function type\n",
#else
  "\323e\313\232\266k\216:\234\302bu\201fo\220\204\223\012",
  "\202l\224\250s\205g\353\356e\233\201(\243\323\215\267\202) \252 f\254low ea\304 \042c\352e\042\012",
  "\230\337\206\315 \330\250loc\373\357\277appe\206 \370\250\322mpo\220\204\244ock\012",
  "\246\234 \305\225imple\233t\321\012",
  "\306\320\224\225\362\273t\264",
  "\277\314a\267gn\232\266 \372\262y\012",
  "\347\231\243\256\314\215\342\321\012",
  "\277\314\250\366\213\201\323\215\267\202; \352sum\232z\210o\012",
  "\307\316\365\200(nega\207ve\302z\210o \243ou\201\330bo\220ds\236",
  "\307\306\243\230\337\206\315\012",
  "\307out\226d\200\246\264",
  "\307\306c\217l\302\225\250\303add\215s\264",
  "\371\216tr\224po\205\201(\371pu\244ic \246s\236",
  "\307\356e\233t; \225\370s\344t\304\012",
  "\042\230fa\312t\367c\352\200\277\314\235\200l\352\201c\352\200\370s\344t\304 \356e\233t\012",
  "m\312\207p\353\230fa\312t\203\370\042s\344t\304\042\012",
  "\220\342\232\327\012",
  "\205i\207\217iz\315 d\231\250\247ce\321\203\230\337\206\232\365\301",
  "\225\250label:\354",
  "\307\263 \376m\200\223\012",
  "\263 \217\215ad\224\342\321:\354",
  "\277\314l\253u\200(n\202-\366\213t\236",
  "\316a\267gn\233\201\277\314\226mp\353a\267gn\233t\012",
  "\042b\215ak\367\243\042\324t\205ue\367\305ou\201\330\324t\247t\012",
  "\306head\375\351ff\210\203from pro\266\255\301",
  "\371\355\304\375\042#if...\042\012",
  "\307\304\206a\313\261\366\213t\012",
  "\307subscrip\201(\225\372\316\243\266o m\213\224subscripts):\354",
  "\307\323\215\267\202\302\352sum\232z\210o\012",
  "\322mpo\220\204\356e\233\201\225\337os\232a\201\235\200\216\204\330\343\353(\227\206t\232a\201l\205\200%d\236",
  "\220k\212w\317\351\215c\207v\301",
  "\316\205\230x ou\201\330bo\220d\203(\357\223\236",
  "\316\277\314\205\230x\232(\357\223\236",
  "\341do\274\225\362\250\230fa\312\201\253u\200(\341%d\236",
  "\341\346mis\355\304 (\341%d\236",
  "empt\224\356e\233t\012",
  "\307\227r\375(po\267\244\224n\202-t\210m\205\231\232\227r\205g\236",
  "\247t\241 \304\206a\313\210\203\336l\205\301",
  "\366\213\201\263 \310\203\371\365\301",
  "duplic\231\200\042c\352e\367label (\253u\200%d\236",
  "\307ellip\226s\302\316\365\200\305\225k\212wn\012",
  "\307\322\237\205\315 \330\337\352\203speci\343\210\264",
  "\304\206a\313\261\366\213\201\247ce\321\203r\213g\200f\243pack\232\227r\205g\012",
  "po\226\214\373p\206a\333t\210\203\277p\215c\321\200\217l \376m\232p\206a\333t\210\264",
  "\266o m\213\224\306\273t\264",
  "\220k\212w\317\316\365\200(\357\223\236",
  "\316\365\274do \225\355\304\302\243\230\227\205\315 \316\305\266o sm\217l\012",
  "\316(\203do \225\355\304\012",
  "\307l\205\200\324t\205u\315\012",
  "\307r\213g\301",
  "\307subscript\302\240\200\042[ ]\367\347\231\221\203\336\320j\243\351\233\226\202\264",
  "m\312\207-\351\233\226\202\373\262y\203\277\314f\312l\224\205i\207\217iz\321\012",
  "\247ce\321\375\320ximum nu\237\261\330\351\233\226\202\264",
  "\220\355\304\232\337os\375b\241c\200(\042}\042\236",
  "\227\206\201\330\306bod\224\344\235ou\201\306head\210\012",
  "\262ys\302loc\373\332\274\360\306\273t\203\256\314pu\244ic (\357\223\236",
  "\220\300ish\232\323\215\267\336bef\221\200\322mpil\261\351\215c\207v\301",
  "duplic\231\200\273t; sam\200\341\305p\352s\232t\344c\301",
  "\306\341\320\224\225\362\250\230fa\312\201\253u\200(\357\223\236",
  "m\312\207p\353\042#else\367\351\215c\207v\274betwe\216 \042#if ... #\216\351f\042\012",
  "\042#elseif\367\351\215c\207\340f\254low\203\372\042#else\367\351\215c\207v\301",
  "nu\237\261\330\347\213d\203do\274\225\343\201\235\200\347\231\221\012",
  "\306\215s\312\201\350\265\330\347\231\221\234 \277\314\223\012",
  "\256\304\213g\200p\215\342\232\347\231\221\264",
  "\306\341\320\224\202l\224\362\250s\205g\353\350\265(\341%d\236",
  "\306\341\320\224\225\314\250\215f\210\216c\200\341\243\372\316(\341\223\236",
  "\357\256\314bo\374\250\215f\210\216c\200\360\372\316(\357\223\236",
  "\307\241\214\373nu\237\261p\215ci\226\336\370#p\241g\320\012",
  "\241\214\373nu\237\261f\221\320\201\217\215ad\224\342\321\012",
  "\241\214\373nu\237\261supp\221\201w\345\225\216\276\321\012",
  "\240\210-\342\232\347\231\243\277\314\230\337\206\232bef\221\200\240\200(\246\234\236",
  "\042\365e\311\367\347\231\243\305\307\336\042\246\367\263\264",
  "\306\341\277\314\372\316(\341\223\236",
  "#\342\200p\231t\210\317\277\227\206\201\344\374\372\217p\310be\207c \304\206a\313\210\012",
  "\205pu\201l\205\200\266o l\202\265(aft\261subs\207\364\214s\236",
  "\257n\350x \210r\243\370\235\200\323\215\267\202\302\243\307\306c\217l\012",
  "m\217f\221m\232UTF-8 \216\322d\205g\302\243c\221rupt\232\343le: \335",
  "\306\240\274bo\374\042\215\364rn\367\360\042\215\364r\317<\253ue>\042\012",
  "\205\324\226\227\216\201\215\364r\317\255\274(\316& n\202-\262y\236",
  "\220k\212w\317\263\302\243\225\250\366\213\201\263 \363",
  "\256\350k\200\250\350\265\345\250\230fa\312\201\253u\200f\243\372\205\230x\232\316p\206a\333t\261\363",
  "\240\210-\342\232\347\231\221\203\360\376\207\340\246\203\320\224\225\362\356e\264",
  "\250\306\243\357\320\224\202l\224bel\202\265\266 \250s\205g\353au\266\355\336\363",
  "\356\200\324fli\313: \202\200\330\235\200\356\274\305\217\215ad\224a\267gn\232\266 a\212\235\261imple\233t\315 \363",
  "\371\356\274\206\200\342\232f\243\327\012",
  "\220k\212w\317au\266\355\202\354",
  "\220k\212w\317\356\200\223 f\243au\266\355\202\354",
  "pu\244ic \332\274\360loc\373\332\274\320\224\225\362\356\274\363",
  "\356\200\332\274\320\224\225\314\205i\207\217iz\232\363",
  "pu\244ic \246\203\320\224\225\215\364r\317\262y\203\363",
  "a\237i\270ou\203\366\213t; \350\265ov\210rid\200\305\215qui\215\204\363",
  "nu\237\261\330\273t\203do\274\225\355\304 \342i\214\012",
  "\323e\313\232\350\265\376m\200id\216\207\343\210\012",
  "\306\216um\210\315 \215qui\215\203\220iqu\200\350g\012",
  "\256\362\215qui\215\204p\206a\333t\210\203aft\261\334\214\373p\206a\333t\210\264",
  "\322\312\204\225\300\204\333\237\210\234 \370\227ruc\201\223\012",
  "\327 do\274\225\362\250\355\304\375\255\301",
  "\346\223 sho\312\204\314\223 \370new-\227y\353\230\337\206\315\264",
  "\325sho\312\204\225\362\372\323lici\201\215\364r\317\255\301",
  "\306pro\266\255\274do \225\355\304\012",
  "specif\224ei\235\261\217l \351\233\226\202\203\243\202l\224\235\200l\352\201\351\233\226\202\012",
  "\256\300\204\325\335",
  "\325w\345\217\215ad\224\342\232\336\235\305\335",
  "\256\300\204\213\224\333\235od\203f\243\335",
  "\256\300\204\333\235o\204\243pr\347t\224\211.\335",
  "\256c\217l \333\235od\203\336\372\262y\012",
  "\256c\217l \333\235od\203\336\250\246\012",
  "\333\235o\204\277\362\250\343rs\201\341\322mpa\207\244\200\344\374\235\200\325\346(\211\236",
  "\325\376m\200\277\227\206\201\344\374\372upp\210c\352\200lett\210\012",
  "\325\310\203\217\215ad\224be\216 \342\232(p\215vio\240l\224se\216 \345\211\236",
  "\323e\313\232id\216\207\343\261- d\271you f\221ge\201\250\255e?\012",
  "\366ru\313\243\306\277\215\364r\317\350\265\335",
  "\256\342\200\366ru\313\243f\221\234; \217\215ad\224\247i\227\203\345\250\335",
  "miss\375\255e\302\243\325\277\362\235\200sam\200\376m\200\345\325\223\012",
  "\256\240\200\230lete\302\325\325\310\203\371\230\227ru\313\221\012",
  "\371\333\235od\320p \243\337\352\203w\345fo\220\204f\243\335",
  "\371\230\227ru\313\243w\345fo\220\204f\243\325\335",
  "\230\227ru\313\221\203\277\314\376\207\340\246\264",
  "\230\227ru\313\221\203\256\362\247t\241 \273t\264",
  "\333\235od\320p \360\337\352\203\226gn\231u\215\203\277\240\200new-\227y\353\346\230\337\206\315\264",
  "\256specif\224\316\351\233\226\202\203\336bo\374\346\360\376m\301",
  "\323e\313\232\346\323\215\267\202\012",
  "f\312ly-qu\217i\343\232\376m\200\223 \305\266o l\202g\302wo\312\204\314tr\242\231\232\266\354",
  "\220\323e\313\232\266k\216\302\323e\313\232\333\235o\204\243pr\347\251\012",
  "\323e\313\232\042\376\207ve\042\302\042get\042\302\243\042set\042\012",
  "\325f\243\325\217\215ad\224\247i\227\264",
  "pr\347t\224gett\210\203\256accep\201\247t\241 \273t\264",
  "\325\277\362\235\200sam\200\215\364r\317\346\345pr\347t\224\325(\211\236",
  "\256mix \333\235od\320p\203\360\337\352s\274\344\374\205h\210it\213c\301",
  "\256\322\210c\200\246\203\266 \253ue\264",
  "\256\322\210c\200objec\201\346\325\266 n\202-objec\201\346\335",
  "\256\322\210c\200n\202-objec\201\346\325\266 objec\201\346\335",
  "\256\322\210c\200\220\215l\231\232objec\201\255\274\325\360\335",
  "\346mis\355\304 (\325\360\211\236",
  "\256\240\200\372objec\201\370\250m\312\207-\350\265sele\313\221\012",
  "\262y\203\206\200\225supp\221t\232\345\215\364r\317\255e\264",
  "\256mix \215f\210\216c\200\360\316\255e\264",
  "\324s\201w\345speci\343\232t\344c\301",
  "\322\312\204\225\300\204\346\223\012",
  "new-\227y\353\316\255\274\256specif\224\351\233\226\336\365\274\345p\206\201\330\235eir \255\301",
  "\376\207ves\302f\221w\206ds\302\360pu\244ic \246\203\256\215\364r\317\262y\264",
  "\307\346\230\337\206\315\012",
  "new-\227y\353\230\337\206\315\203sho\312\204\225\362\042new\042\012",
  "vo\271\256\314\240\232\345\250\357\255\301",
  "\307\346\323\215\267\202\012",
  "#p\241gm\250new\230\337\203\277\314\215qui\215\204\243\334\214\217\012",
  "new-\227y\353\230\337\206\315\203\206\200\215qui\215d\012",
  "\256a\267g\317n\312l \266 \250n\202-n\312l\276\200\255\301",
  "\371gett\261fo\220\204f\243pr\347t\224\335",
  "sett\261\277\350k\200\247a\313l\224\202\200\247t\241 \341\344\374\346\335",
  "sett\261\277\215\364r\317void\012",
  "\371sett\261fo\220\204f\243pr\347t\224\335",
  "\256\240\200n\202-pu\244ic \246\203\345c\217lback\264",
  "\256a\267g\317INVALID_FUNCTION \266 \250n\202-\306\255\301"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\256\215a\204from \343le:\354",
  "\256writ\200\266 \343le:\354",
  "t\276\200ov\210flow:\354",
  "\205suf\343ci\216\201\333m\221y\012",
  "\307\352se\237l\261\205\227ruc\214\354",
  "num\210ic ov\210flow\302\247ce\321\375capaci\251\012",
  "\322mpil\232scrip\201\247ce\321\203\235\200\320ximum \333m\221\224\365\200(%l\204bytes\236",
  "\266o m\213\224\210r\243\333ssag\274\336\202\200l\205\301",
  "\322\230pag\200\320pp\375\343\353\225fo\220d\012",
  "\307p\231h:\354",
  "\352s\210\214 fail\321: \335",
  "\240\261\210r\221: \335"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n",
/*237*/  "coercing functions to and from primitives is unsupported and will be removed in the future\n",
#else
  "\327 \305tr\242\231\232\266 %\204\304\206a\313\210\264",
  "\215\342i\214 \330\366\213t/\320cro \363",
  "nu\237\261\330\273t\203do\274\225\355\304 \342i\214\012",
  "\263 \305nev\261\240\321:\354",
  "\263 \305a\267gn\232\250\253u\200\235a\201\305nev\261\240\321:\354",
  "\215d\220d\213\201\322\230: \366\213\201\323\215\267\336\305z\210o\012",
  "\215d\220d\213\201te\227: \366\213\201\323\215\267\336\305n\202-z\210o\012",
  "\220k\212w\317#p\241g\320\012",
  "\306\344\374\350\265\215s\312\201\240\232bef\221\200\342i\214\302f\221c\375\215p\206s\301",
  "\246\234 sho\312\204\215\364r\317\250\253u\301",
  "po\267\244\200\240\200\330\263 bef\221\200\205i\207\217iz\315:\354",
  "po\267\244\224\220\205t\216\230\204a\267gn\233t\012",
  "po\267\244\224\220\205t\216\230\204bit\344s\200\347\315\012",
  "\350\265mis\355\304\012",
  "po\267\244\224\250\042\366\367\316\341w\345\205t\216\230d:\354",
  "\323\215\267\336\310\203\371effe\313\012",
  "ne\227\232\322m\233t\012",
  "loos\200\205d\216t\315\012",
  "\254\204\227y\353pro\266\255\274\240\232\344\374\334\214\373semic\254umn\264",
  "loc\373\357\223 s\310dow\203\250\357a\201\250p\215c\321\375level\012",
  "\323\215\267\336\344\374\350\265ov\210rid\200\277appe\206 betwe\216 p\206\216\235ese\264",
  "label \376m\200\223 s\310dow\203\350\265\376m\301",
  "nu\237\261\330\351git\203\247ce\321\203\241\214\373nu\237\261p\215ci\226\202\012",
  "\215d\220d\213\201\042\365e\311\042: \341\365\200\305\217way\2031 \363",
  "\205\230t\210m\205\231\200\316\365\200\370\042\365e\311\367\323\215\267\336\363",
  "\220\215a\304\276\200\322\230\012",
  "\250\357\305a\267gn\232\266 itself \363",
  "m\221\200\205i\207\217iz\210\203\235\372\216um \343eld\264",
  "l\216g\374\330\205i\207\217iz\261\247ce\321\203\365\200\330\235\200\216um \343eld\012",
  "\205\230x \350\265mis\355\304 \363",
  "\371imple\233t\315 f\243\356\200\223 \370\246\234\302\371f\217l-back\012",
  "\356\200speci\343c\315 \336f\221w\206\204\230\337\206\315 \305ig\212\215d\012",
  "outpu\201\343\353\305writt\216\302bu\201\344\374\322mpac\201\216\322d\375\351s\276\321\012",
  "\356\200\357\223 s\310dow\203\250glob\373\332\301",
  "\327 \305m\206k\232\345\230p\215c\231\321: \335",
  "pu\244ic \306lack\203f\221w\206\204\230\337\206\315 \363",
  "\220k\212w\317p\206a\333t\261\370subs\207\364\214 (\205c\221\215c\201#\342\200p\231t\210n\236",
  "\322\210c\375\246\203\266 \360from primi\207v\274\305\220supp\221t\232\360\344ll \314\215mov\232\370\235\200fu\364\215\012"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
