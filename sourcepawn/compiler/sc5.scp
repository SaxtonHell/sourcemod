/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {100,32}, {97,114}, {105,110}, {116,105}, {37,115}, {101,114}, {110,111}, {97,110}, {101,110}, {97,108}, {135,130}, {114,101},
  {111,114}, {34,136}, {145,34}, {117,110}, {121,32}, {138,129}, {115,105}, {115,116}, {100,101}, {97,116}, {101,132}, {109,140}, {32,146}, {41,10}, {109,98}, {116,104},
  {114,97}, {117,115}, {144,32}, {147,99}, {98,108}, {163,142}, {102,165}, {101,120}, {118,141}, {97,32}, {111,108}, {116,121}, {99,139}, {112,101}, {115,121}, {172,149},
  {174,158}, {133,160}, {176,170}, {115,10}, {103,32}, {105,132}, {103,117}, {115,150}, {182,155}, {137,32}, {133,184}, {116,111}, {102,134}, {97,164}, {168,181}, {99,104},
  {161,129}, {134,190}, {109,192}, {104,97}, {111,102}, {105,131}, {44,32}, {166,32}, {109,101}, {99,116}, {98,128}, {97,142}, {177,148}, {109,97}, {101,100}, {117,108},
  {99,130}, {37,131}, {118,133}, {112,143}, {178,156}, {196,32}, {105,189}, {210,214}, {99,111}, {101,131}, {130,32}, {99,108}, {118,128}, {110,32}, {152,188}, {102,105},
  {111,112}, {186,129}, {100,105}, {97,115}, {108,128}, {112,128}, {97,131}, {136,10}, {156,10}, {109,153}, {151,153}, {116,97}, {171,229}, {119,105}, {215,128}, {224,137},
  {101,10}, {212,157}, {34,32}, {171,173}, {195,220}, {40,241}, {150,122}, {208,151}, {139,32}, {141,32}, {110,97}, {101,108}, {139,132}, {102,144}, {134,32}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method or property %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style type declarations\n",
/*121*/  "cannot specify array dimensions on both type and name\n",
/*122*/  "expected type expression\n",
/*123*/  "fully-qualified name \"%s\" is too long, would be truncated to \"%s\"\n",
/*124*/  "unexpected token, expected method or property\n",
/*125*/  "expected \"native\" or \"get\"\n",
/*126*/  "%s for %s already exists\n",
/*127*/  "property getters cannot accept extra arguments\n",
/*128*/  "%s must have the same return type as property %s (%s)\n",
/*129*/  "cannot mix methodmaps and classes with inheritance\n",
/*130*/  "cannot coerce functions to values\n",
/*131*/  "cannot coerce object type %s to non-object type %s\n",
/*132*/  "cannot coerce non-object type %s to object type %s\n",
/*133*/  "cannot coerce unrelated object types %s and %s\n",
/*134*/  "type mismatch (%s and %s)\n",
/*135*/  "cannot use an object in a multi-tag selector\n",
/*136*/  "arrays are not supported as return types\n",
/*137*/  "cannot mix reference and array types\n",
/*138*/  "const was specified twice\n",
/*139*/  "could not find type \"%s\"\n",
/*140*/  "new-style array types cannot specify dimension sizes as part of their type\n",
/*141*/  "natives, forwards, and public functions cannot return arrays\n",
/*142*/  "invalid type declaration\n",
/*143*/  "new-style declarations should not have \"new\"\n",
/*144*/  "void cannot be used as a variable type\n",
/*145*/  "invalid type expression\n",
/*146*/  "#pragma newdecls must be required or optional\n",
/*147*/  "new-style declarations are required\n",
#else
  "\247\255\311\232\273k\214:\234\306bu\201fo\223\204\222\012",
  "\202l\224\251s\206g\344\352e\233\201(\242\247\323\267\202) \254 f\252low ea\277 \042c\343e\042\012",
  "\230\333\205\313 \325\251loc\371\356\302ap\255\205 \376\251\330mpo\223\204\244ock\012",
  "\246\234 \305\225imple\233t\316\012",
  "\307\315\224\225\364\272t\263",
  "\302\312a\267gn\232\273 \370\261y\012",
  "\357\231\242\257\312\217\336\316\012",
  "\302\312\251\367\213\201\247\323\267\202; \343sum\232z\211o\012",
  "\301\314\366\200(nega\207ve\306z\211o \242ou\201\325bo\223ds\235",
  "\301\307\242\230\333\205\313\012",
  "\301out\226d\200\246\263",
  "\301\307c\215l\306\225\251\276add\217s\263",
  "\212 \214tr\224po\206\201(\212 pu\244ic \246s\235",
  "\301\352e\233t; \225\376s\355t\277\012",
  "\042\230fa\317t\362c\343\200\302\312\237\200l\343\201c\343\200\376s\355t\277 \352e\233t\012",
  "m\317\207p\344\230fa\317t\203\376\042s\355t\277\042\012",
  "\223\336\232\324\012",
  "\206i\207\215iz\313 d\231\251\247ce\316\203\230\333\205\232\366\360",
  "\225\251lab\373:\350",
  "\301\262 \372m\200\222\012",
  "\262 \215\217ad\224\336\316:\350",
  "\302\312l\250u\200(n\202-\367\213t\235",
  "\314a\267gn\233\201\302\312\226mp\344a\267gn\233t\012",
  "\042b\217ak\362\242\042\320t\206ue\362\305ou\201\325\320t\247t\012",
  "\307head\206\264\342ff\211\203from pro\273\363\012",
  "\212 \351\277\206\264\042#if...\042\012",
  "\301\277\205a\311\271\367\213t\012",
  "\301subscrip\201(\225\370\314\242\273o m\213\224subscripts):\350",
  "\301\247\323\267\202\306\343sum\232z\211o\012",
  "\330mpo\223\204\352e\233\201\225\333os\232a\201\237\200\214\204\325\337\344(\227\205t\232a\201l\206\200%d\235",
  "\223k\212w\335\342\217c\207v\360",
  "\314\206\230x ou\201\325bo\223d\203(\356\222\235",
  "\314\302\312\206\230x\232(\356\222\235",
  "\341do\331\225\364\251\230fa\317\201\250u\200(\341%d\235",
  "\341\354mis\351\277 (\341%d\235",
  "empt\224\352e\233t\012",
  "\301\227r\206\264(po\267\244\224n\202-t\211m\206\231\232\227r\206g\235",
  "\247t\240 \277\205a\311\211\203\332l\206\360",
  "\367\213\201\262 \303\203\212 \366\360",
  "duplic\231\200\042c\343e\362lab\373 (\250u\200%d\235",
  "\301\373lip\226s\306\314\366\200\305\225k\212wn\012",
  "\301\330\236\206\313 \325\333\343\203s\255ci\337\211\263",
  "\277\205a\311\271\367\213\201\247ce\316\203r\213g\200f\242pack\232\227r\206g\012",
  "po\226\216\371p\205a\310t\211\203\302\323c\316\200\215l \372m\232p\205a\310t\211\263",
  "\273o m\213\224\307\272t\263",
  "\223k\212w\335\314\366\200(\356\222\235",
  "\314\366\331do \225\351\277\306\242\230\227\206\313 \314\305\273o sm\215l\012",
  "\314(\203do \225\351\277\012",
  "\301l\206\200\320t\206u\313\012",
  "\301r\213g\360",
  "\301subscript\306\241\200\042[ ]\362\357\231\220\203\332\315j\242\342\233\226\202\263",
  "m\317\207-\342\233\226\202\371\261y\203\302\312f\317l\224\206i\207\215iz\316\012",
  "\247ce\316\206\264\315ximum nu\236\271\325\342\233\226\202\263",
  "\223\351\277\232\333os\206\264b\240c\200(\042}\042\235",
  "\227\205\201\325\307bod\224\355\237ou\201\307head\211\012",
  "\261ys\306loc\371\327\331\374\307\272t\203\257\312pu\244ic (\356\222\235",
  "\223\274ish\232\247\323\267\332be\375\200\330mpil\271\342\217c\207v\360",
  "duplic\231\200\272t; sam\200\341\305p\343s\232t\355c\360",
  "\307\341\315\224\225\364\251\230fa\317\201\250u\200(\356\222\235",
  "m\317\207p\344\042#\373se\362\342\217c\207v\331betwe\214 \042#if ... #\214\342f\042\012",
  "\042#\373seif\362\342\217c\207\334f\252low\203\370\042#\373se\362\342\217c\207v\360",
  "nu\236\271\325\357\213d\203do\331\225\337\201\237\200\357\231\220\012",
  "\307\217s\317\201\353\264\325\357\231\220\234 \302\312\222\012",
  "\257\277\213g\200\323\336\232\357\231\220\263",
  "\307\341\315\224\202l\224\364\251s\206g\344\353\264(\341%d\235",
  "\307\341\315\224\225\312\251\217f\211\214c\200\341\242\370\314(\341\222\235",
  "\356\257\312bo\237 \251\217f\211\214c\200\374\370\314(\356\222\235",
  "\301\240\216\371nu\236\271\323ci\226\332\376#p\240g\315\012",
  "\240\216\371nu\236\271\375\315\201\215\217ad\224\336\316\012",
  "\240\216\371nu\236\271supp\220\201w\346\225\214\275\316\012",
  "\241\211-\336\232\357\231\242\302\312\230\333\205\232be\375\200\241\200(\246\234\235",
  "\042\366e\304\362\357\231\242\305\301\332\042\246\362\262\263",
  "\307\341\302\312\370\314(\341\222\235",
  "#\336\200p\231t\211\335\302\227\205\201\355\237 \370\215p\303be\207c \277\205a\311\211\012",
  "\206pu\201l\206\200\273o l\202\264(aft\271subs\207tu\216s\235",
  "\256n\353x \211r\242\376\237\200\247\323\267\202\306\242\301\307c\215l\012",
  "m\215\375m\232UTF-8 \214\330d\206g\306\242c\220rupt\232\337le: \347",
  "\307\241\331bo\237 \042\217turn\362\374\042\217tur\335<\250ue>\042\012",
  "\206\320\226\227\214\201\217tur\335\363\203(\314& n\202-\261y\235",
  "\223k\212w\335\262\306\242\225\251\367\213\201\262 \365",
  "\257\353k\200\251\353\264\346\251\230fa\317\201\250u\200f\242\370\206\230x\232\314p\205a\310t\271\365",
  "\241\211-\336\232\357\231\220\203\374\372\207\334\246\203\315\224\225\364\352e\263",
  "\251\307\242\356\315\224\202l\224b\373\202\264\273 \251s\206g\344au\273\351\332\365",
  "\352\200\320fli\311: \202\200\325\237\200\352\331\305\215\217ad\224a\267gn\232\273 a\212\237\271imple\233t\313 \365",
  "\212 \352\331\205\200\336\232f\242\324\012",
  "\223k\212w\335au\273\351\202\350",
  "\223k\212w\335\352\200\222 f\242au\273\351\202\350",
  "pu\244ic \327\331\374loc\371\327\331\315\224\225\364\352\331\365",
  "\352\200\327\331\315\224\225\312\206i\207\215iz\232\365",
  "pu\244ic \246\203\315\224\225\217tur\335\261y\203\365",
  "a\236i\266ou\203\367\213t; \353\264ov\211rid\200\305\217qui\217\204\365",
  "nu\236\271\325\272t\203do\331\225\351\277 \336i\216\012",
  "\247\255\311\232\353\264\372m\200id\214\207\337\211\012",
  "\307\214um\211\313 \217qui\217\203\223iqu\200\353g\012",
  "\257\364\217qui\217\204p\205a\310t\211\203aft\271\340\216\371p\205a\310t\211\263",
  "\330\317\204\225\274\204\310\236\211\234 \376\227ruc\201\222\012",
  "\324 do\331\225\364\251\351\277\206\264\363\012",
  "\354\222 sho\317\204\312\222 \376new-\227y\344\230\333\205\313\263",
  "\321sho\317\204\225\364\370\247plici\201\217tur\335\363\012",
  "\307pro\273\363\203do \225\351\277\012",
  "s\255cif\224ei\237\271\215l \342\233\226\202\203\242\202l\224\237\200l\343\201\342\233\226\202\012",
  "\257\274\204\321\347",
  "\321w\346\215\217ad\224\336\232\332\237\305\347",
  "\257\274\204\213\224\310\237od\203f\242\347",
  "\257\274\204\310\237o\204\242pr\357t\224\210.\347",
  "\257c\215l \310\237od\203\332\370\261y\012",
  "\257c\215l \310\237od\203\332\251\246\012",
  "\310\237o\204\302\364\251\337rs\201\341\330mpa\207\244\200\355\237 \237\200\321\354(\210\235",
  "\321\372m\200\302\227\205\201\355\237 \370upp\211c\343\200lett\211\012",
  "\321\303\203\215\217ad\224be\214 \336\232(\323vio\241l\224se\214 \346\210\235",
  "\247\255\311\232id\214\207\337\271- d\265you \375ge\201\251\363?\012",
  "\367ru\311\242\307\302\217tur\335\353\264\347",
  "\257\336\200\367ru\311\242\375\234; \215\217ad\224\247i\227\203\346\251\347",
  "miss\206\264\363\306\242\321\302\364\237\200sam\200\372m\200\346\321\222\012",
  "\257\241\200\230lete\306\321\321\303\203\212 \230\227ru\311\220\012",
  "\212 \310\237od\315p \242\333\343\203w\346fo\223\204f\242\347",
  "\212 \230\227ru\311\242w\346fo\223\204f\242\321\347",
  "\230\227ru\311\220\203\302\312\372\207\334\246\263",
  "\230\227ru\311\220\203\257\364\247t\240 \272t\263",
  "\310\237od\315p \374\333\343\203\226gn\231u\217\203\302\241\200new-\227y\344\354\230\333\205\313\263",
  "\257s\255cif\224\314\342\233\226\202\203\332bo\237 \354\374\372\310\012",
  "\247\255\311\232\354\247\323\267\202\012",
  "f\317ly-qu\215i\337\232\372m\200\222 \305\273o l\202g\306wo\317\204\312tr\243\231\232\273\350",
  "\223\247\255\311\232\273k\214\306\247\255\311\232\310\237o\204\242pr\357\253\012",
  "\247\255\311\232\042\372\207ve\362\242\042get\042\012",
  "\321f\242\321\215\217ad\224\247i\227\263",
  "pr\357t\224gett\211\203\257accep\201\247t\240 \272t\263",
  "\321\302\364\237\200sam\200\217tur\335\354\346pr\357t\224\321(\210\235",
  "\257mix \310\237od\315p\203\374\333\343s\331\355\237 \206h\211it\213c\360",
  "\257\330\211c\200\246\203\273 \250ue\263",
  "\257\330\211c\200objec\201\354\321\273 n\202-objec\201\354\347",
  "\257\330\211c\200n\202-objec\201\354\321\273 objec\201\354\347",
  "\257\330\211c\200\223\217l\231\232objec\201\363\203\321\374\347",
  "\354mis\351\277 (\321\374\210\235",
  "\257\241\200\370objec\201\376\251m\317\207-\353\264s\373e\311\220\012",
  "\261y\203\205\200\225supp\220t\232\346\217tur\335\363\263",
  "\257mix \217f\211\214c\200\374\314\363\263",
  "\320s\201w\346s\255ci\337\232t\355c\360",
  "\330\317\204\225\274\204\354\222\012",
  "new-\227y\344\314\363\203\257s\255cif\224\342\233\226\332\366\331\346p\205\201\325\237eir \363\012",
  "\372\207ves\306\375w\205ds\306\374pu\244ic \246\203\257\217tur\335\261y\263",
  "\301\354\230\333\205\313\012",
  "new-\227y\344\230\333\205\313\203sho\317\204\225\364\042new\042\012",
  "vo\265\257\312\241\232\346\251\356\363\012",
  "\301\354\247\323\267\202\012",
  "#p\240gm\251new\230\333\203\302\312\217qui\217\204\242\340\216\215\012",
  "new-\227y\344\230\333\205\313\203\205\200\217qui\217d\012"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\257\217a\204from \337le:\350",
  "\257writ\200\273 \337le:\350",
  "t\275\200ov\211flow:\350",
  "\206suf\337ci\214\201\310m\220y\012",
  "\301\343se\236l\271\206\227ruc\216\350",
  "num\211ic ov\211flow\306\247ce\316\206\264capaci\253\012",
  "\330mpil\232scrip\201\247ce\316\203\237\200\315ximum \310m\220\224\366\200(%l\204bytes\235",
  "\273o m\213\224\211r\242\310ssag\331\332\202\200l\206\360",
  "\330\230pag\200\315pp\206\264\337\344\225fo\223d\012",
  "\301p\231h:\350",
  "\343s\211\216 fail\316: \347",
  "\241\271\211r\220: \347"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\324 \305tr\243\231\232\273 %\204\277\205a\311\211\263",
  "\217\336i\216 \325\367\213t/\315cro \365",
  "nu\236\271\325\272t\203do\331\225\351\277 \336i\216\012",
  "\262 \305nev\271\241\316:\350",
  "\262 \305a\267gn\232\251\250u\200\237a\201\305nev\271\241\316:\350",
  "\217d\223d\213\201\330\230: \367\213\201\247\323\267\332\305z\211o\012",
  "\217d\223d\213\201te\227: \367\213\201\247\323\267\332\305n\202-z\211o\012",
  "\223k\212w\335#p\240g\315\012",
  "\307\355\237 \353\264\217s\317\201\241\232be\375\200\336i\216\306\375c\206\264\217p\205s\360",
  "\246\234 sho\317\204\217tur\335\251\250u\360",
  "po\267\244\200\241\200\325\262 be\375\200\206i\207\215iz\313:\350",
  "po\267\244\224\223\206t\214\230\204a\267gn\233t\012",
  "po\267\244\224\223\206t\214\230\204bit\355s\200\357\313\012",
  "\353\264mis\351\277\012",
  "po\267\244\224\251\042\367\362\314\341w\346\206t\214\230d:\350",
  "\247\323\267\332\303\203\212 effe\311\012",
  "ne\227\232\330m\233t\012",
  "loos\200\206d\214t\313\012",
  "\252\204\227y\344pro\273\363\203\241\232\355\237 \340\216\371semic\252umn\263",
  "loc\371\356\222 s\303dow\203\251\356a\201\251\323c\316\206\264lev\373\012",
  "\247\323\267\332\355\237 \353\264ov\211rid\200\302ap\255\205 betwe\214 p\205\214\237ese\263",
  "lab\373 \372m\200\222 s\303dow\203\353\264\372\310\012",
  "nu\236\271\325\342git\203\247ce\316\203\240\216\371nu\236\271\323ci\226\202\012",
  "\217d\223d\213\201\042\366e\304\042: \341\366\200\305\215way\2031 \365",
  "\206\230t\211m\206\231\200\314\366\200\376\042\366e\304\362\247\323\267\332\365",
  "\223\217a\277\275\200\330\230\012",
  "\251\356\305a\267gn\232\273 its\373f \365",
  "m\220\200\206i\207\215iz\211\203\237\370\214um \337\373d\263",
  "l\214g\237 \325\206i\207\215iz\271\247ce\316\203\366\200\325\237\200\214um \337\373d\012",
  "\206\230x \353\264mis\351\277 \365",
  "\212 imple\233t\313 f\242\352\200\222 \376\246\234\306\212 f\215l-back\012",
  "\352\200s\255ci\337c\313 \332\375w\205\204\230\333\205\313 \305ig\212\217d\012",
  "outpu\201\337\344\305writt\214\306bu\201\355\237 \330mpac\201\214\330d\206\264\342s\275\316\012",
  "\352\200\356\222 s\303dow\203\251glob\371\327\360",
  "\324 \305m\205k\232\346\230\323c\231\316: \347",
  "pu\244ic \307lack\203\375w\205\204\230\333\205\313 \365",
  "\223k\212w\335p\205a\310t\271\376subs\207tu\216 (\206c\220\217c\201#\336\200p\231t\211n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
