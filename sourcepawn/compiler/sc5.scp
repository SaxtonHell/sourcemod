/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {100,32}, {105,110}, {97,114}, {116,105}, {37,115}, {101,114}, {110,111}, {97,110}, {101,110}, {97,108}, {135,130}, {34,136},
  {143,34}, {114,101}, {111,114}, {117,110}, {121,32}, {138,129}, {97,116}, {115,105}, {115,116}, {101,132}, {100,101}, {109,140}, {32,144}, {41,10}, {109,98}, {116,104},
  {114,97}, {117,115}, {146,32}, {147,99}, {142,32}, {98,108}, {102,163}, {111,108}, {101,120}, {118,141}, {97,32}, {115,121}, {171,158}, {172,167}, {99,139}, {103,32},
  {134,160}, {116,121}, {115,10}, {174,149}, {112,101}, {103,117}, {181,155}, {137,32}, {134,182}, {116,111}, {102,133}, {115,151}, {99,104}, {105,132}, {97,165}, {105,131},
  {161,129}, {166,164}, {169,189}, {109,192}, {104,97}, {109,101}, {111,102}, {99,116}, {133,194}, {109,97}, {101,100}, {99,130}, {37,131}, {176,148}, {173,156}, {44,32},
  {117,108}, {99,111}, {98,128}, {118,134}, {112,145}, {198,32}, {105,190}, {211,214}, {116,97}, {101,131}, {130,32}, {154,186}, {134,97}, {102,105}, {118,128}, {184,129},
  {110,32}, {111,112}, {97,115}, {136,10}, {156,10}, {128,144}, {152,150}, {109,150}, {100,105}, {119,105}, {225,137}, {101,10}, {206,157}, {34,32}, {40,236}, {99,108},
  {97,131}, {203,152}, {139,32}, {141,32}, {196,222}, {101,108}, {177,112}, {151,122}, {108,128}, {166,142}, {133,32}, {159,32}, {216,175}, {133,175}, {231,188}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method or property %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style type declarations\n",
/*121*/  "cannot specify array dimensions on both type and name\n",
/*122*/  "expected type expression\n",
/*123*/  "fully-qualified name \"%s\" is too long, would be truncated to \"%s\"\n",
/*124*/  "unexpected token, expected method or property\n",
/*125*/  "expected \"native\" or \"get\"\n",
/*126*/  "%s for %s already exists\n",
/*127*/  "property getters cannot accept extra arguments\n",
/*128*/  "%s must have the same return type as property %s (%s)\n",
/*129*/  "cannot mix methodmaps and classes with inheritance\n",
/*130*/  "cannot coerce functions to values\n",
/*131*/  "cannot coerce object type %s to non-object type %s\n",
/*132*/  "cannot coerce non-object type %s to object type %s\n",
/*133*/  "cannot coerce unrelated object types %s and %s\n",
/*134*/  "type mismatch (%s and %s)\n",
/*135*/  "cannot use an object in a multi-tag selector\n",
/*136*/  "arrays are not supported as return types\n",
/*137*/  "cannot mix reference and array types\n",
/*138*/  "const was specified twice\n",
/*139*/  "could not find type \"%s\"\n",
/*140*/  "new-style array types cannot specify dimension sizes as part of their type\n",
#else
  "\250\264\307\231\271k\214:\234\317bu\201fo\223\204\220\012",
  "\202l\224\252s\205g\370\346e\233\201(\242\250\324\273\202) \256 f\247low ea\274 \042c\342e\042\012",
  "\232\357\334\244\325\252loc\363\327\200\303ap\264\206 \372\252\321mpo\223\204\245ock\012",
  "\371\234 \277\225imple\233t\312\012",
  "\301\311\224\225\364\270t\262",
  "\303\322a\273gn\231\271 \362\260y\012",
  "\352\226\242\263\322\221\333\312\012",
  "\303\322\252\361\213\201\250\324\273\202; \342sum\231z\211o\012",
  "\310\315\367\200(nega\207ve\317z\211o \242ou\201\325bo\223ds\235",
  "\310\301\242\232\357\334\216\012",
  "\310out\227d\200\371\262",
  "\310\301c\215l\317\225\252\302add\221s\262",
  "\212 \214tr\224po\205\201(\212 pu\245ic \371s\235",
  "\310\346e\233t; \225\372s\351t\274\012",
  "\042\232fa\320t\355c\342\200\303\322\237\200l\342\201c\342\200\372s\351t\274 \346e\233t\012",
  "m\320\207p\370\232fa\320t\203\372\042s\351t\274\042\012",
  "\223\333\231\316\012",
  "\205i\207\215iza\244d\226\252\250ce\312\203\232\357\206\231\367\353",
  "\225\252lab\365:\344",
  "\310\255 nam\345\012",
  "\255 \215\221ad\224\333\312:\344",
  "\303\322l\251u\200(n\202-\361\213t\235",
  "\315a\273gn\233\201\303\322\227mp\370a\273gn\233t\012",
  "\042b\221ak\355\242\042\313t\205ue\355\277ou\201\325\313t\250t\012",
  "\301head\375\350ff\211\203from pro\271\261\264\012",
  "\212 \376\375\042#if...\042\012",
  "\310\274\334\307\267\361\213t\012",
  "\310subscrip\201(\225\362\315\242\271o m\213\224subscripts):\344",
  "\310\250\324\273\202\317\342sum\231z\211o\012",
  "\321mpo\223\204\346e\233\201\225\357os\231a\201\237\200\214\204\325\335\370(\230\206t\231a\201l\205\200%d\235",
  "\223k\212w\340\350\221c\207v\353",
  "\315\205\232x ou\201\325bo\223d\203(\327\345\235",
  "\315\303\322\205\232x\231(\327\345\235",
  "\337do\331\225\364\252\232fa\320\201\251u\200(\337%d\235",
  "\337\366\200mis\376 (\337%d\235",
  "empt\224\346e\233t\012",
  "\310\230r\375(po\273\245\224n\202-t\211m\205\226\231\230r\205g\235",
  "\250t\240 \274\334\307\211\203\332l\205\353",
  "\361\213\201\255 \304\203\212 \367\353",
  "duplic\226\200\042c\342e\355lab\365 (\251u\200%d\235",
  "\310\365lip\227s\317\315\367\200\277\225k\212wn\012",
  "\310\321\236\205a\244\325\357\342\203s\264ci\335\211\262",
  "\274\334\307\267\361\213\201\250ce\312\203r\213g\200f\242pack\231\230r\205g\012",
  "po\227\216\363p\334\305t\211\203\303\324c\312\200\215l nam\231p\334\305t\211\262",
  "\271o m\213\224\301\270t\262",
  "\223k\212w\340\315\367\200(\327\345\235",
  "\315\367\331do \225\376\317\242\232\230\205a\244\315\277\271o sm\215l\012",
  "\315(\203do \225\376\012",
  "\310l\205\200\313t\205ua\216\012",
  "\310r\213g\353",
  "\310subscript\317\241\200\042[ ]\355\352\226\222\203\332\311j\242\350\233\227\202\262",
  "m\320\207-\350\233\227\202\363\260y\203\303\322f\320l\224\205i\207\215iz\312\012",
  "\250ce\312\375\311ximum nu\236\267\325\350\233\227\202\262",
  "\223\376\231\357os\375b\240c\200(\042}\042\235",
  "\230\206\201\325\301bod\224\351\237ou\201\301head\211\012",
  "\260ys\317loc\363\327\331\213\204\301\270t\203\263\322pu\245ic (\327\345\235",
  "\223\272ish\231\250\324\273\332bef\222\200\321mpil\267\350\221c\207v\353",
  "duplic\226\200\270t; sam\200\337\277p\342s\231t\351c\353",
  "\301\337\311\224\225\364\252\232fa\320\201\251u\200(\327\345\235",
  "m\320\207p\370\042#\365se\355\350\221c\207v\331betwe\214 \042#if ... #\214\350f\042\012",
  "\042#\365seif\355\350\221c\207\336f\247low\203\362\042#\365se\355\350\221c\207v\353",
  "nu\236\267\325\352\213d\203do\331\225\335\201\237\200\352\226\222\012",
  "\301\221s\320\201\374\325\352\226\222\234 \303\322\220\012",
  "\263\274\213g\200\324\333\231\352\226\222\262",
  "\301\337\311\224\202l\224\364\252s\205g\370\374(\337%d\235",
  "\301\337\311\224\225\322\252\221f\211\214c\200\337\242\362\315(\337\220\235",
  "\327\200\263\322bo\373\252\221f\211\214c\200\213\204\362\315(\327\345\235",
  "\310\240\216\363nu\236\267\324ci\227\332\372#p\240g\311\012",
  "\240\216\363nu\236\267f\222\311\201\215\221ad\224\333\312\012",
  "\240\216\363nu\236\267supp\222\201w\360\225\214\276\312\012",
  "\241\211-\333\231\352\226\242\303\322\232\357\206\231bef\222\200\241\200(\371\234\235",
  "\042\367e\306\355\352\226\242\277\310\332\042\371\355\255\262",
  "\301\337\303\322\362\315(\337\220\235",
  "#\333\200p\226t\211\340\303\230\206\201\351\373\362\215p\304be\207c \274\334\307\211\012",
  "\205pu\201l\205\200\271o l\202\257(aft\267subs\207tu\216s\235",
  "\253n\330x \211r\242\372\237\200\250\324\273\202\317\242\310\301c\215l\012",
  "m\215f\222m\231UTF-8 \214\321d\205g\317\242c\222rupt\231\335le: \343",
  "\301\241\331bo\373\042\221turn\355\213\204\042\221tur\340<\251ue>\042\012",
  "\205\313\227\230\214\201\221tur\340\261\264\203(\315& n\202-\260y\235",
  "\223k\212w\340\255\317\242\225\252\361\213\201\255 \356",
  "\263\330k\200\252\374\360\252\232fa\320\201\251u\200f\242\362\205\232x\231\315p\334\305t\267\356",
  "\241\211-\333\231\352\226\222\203\213\204na\207\336\371\203\311\224\225\364\346e\262",
  "\252\301\242\327\200\311\224\202l\224b\365\202\257\271 \252s\205g\370au\271\347\332\356",
  "\346\200\313fli\307: \202\200\325\237\200\346\331\277\215\221ad\224a\273gn\231\271 a\212\237\267imple\233\330\244\356",
  "\212 \346\331\206\200\333\231f\242\316\012",
  "\223k\212w\340au\271\347\202\344",
  "\223k\212w\340\346\345 f\242au\271\347\202\344",
  "pu\245ic \327\331\213\204loc\363\327\331\311\224\225\364\346\331\356",
  "\346\200\327\331\311\224\225\322\205i\207\215iz\231\356",
  "pu\245ic \371\203\311\224\225\221tur\340\260y\203\356",
  "a\236i\265ou\203\361\213t; \374ov\211rid\200\277\221qui\221\204\356",
  "nu\236\267\325\270t\203do\331\225\376 \333i\216\012",
  "\250\264\307\231\374nam\200id\214\207\335\211\012",
  "\301\214um\211a\244\221qui\221\203\223iqu\200\330g\012",
  "\263\364\221qui\221\204p\334\305t\211\203aft\267\341\216\363p\334\305t\211\262",
  "\321\320\204\225\272\204\305\236\211\234 \372\230ruc\201\220\012",
  "\316 do\331\225\364\252\376\375\261\264\012",
  "\366\345 sho\320\204\322\220 \372new-\230y\370\232\357\334\216\262",
  "\314sho\320\204\225\364\362\250plici\201\221tur\340\261\264\012",
  "\301pro\271\261\264\203do \225\376\012",
  "s\264cif\224ei\237\267\215l \350\233\227\202\203\242\202l\224\237\200l\342\201\350\233\227\202\012",
  "\263\272\204\314\343",
  "\314w\360\215\221ad\224\333\231\332\237\277\343",
  "\263\272\204\213\224\305\237od\203f\242\343",
  "\263\272\204\305\237o\204\242pr\352t\224\210.\343",
  "\263c\215l \305\237od\203\332\362\260y\012",
  "\263c\215l \305\237od\203\332\252\371\012",
  "\305\237o\204\303\364\252\335rs\201\337\321mpa\207\245\200\351\373\237\200\314\366\200(\210\235",
  "\314nam\200\303\230\206\201\351\373\362upp\211c\342\200lett\211\012",
  "\314\304\203\215\221ad\224be\214 \333\231(\324vio\241l\224se\214 \360\210\235",
  "\250\264\307\231id\214\207\335\267- d\275you f\222ge\201\252\261\264?\012",
  "\361ru\307\242\301\303\221tur\340\374\343",
  "\263\333\200\361ru\307\242f\222\234; \215\221ad\224\250i\230\203\360\252\343",
  "miss\375\261\264\317\242\314\303\364\237\200sam\200nam\200\360\314\220\012",
  "\263\241\200\232lete\317\314\314\304\203\212 \232\230ru\307\222\012",
  "\212 \305\237od\311p \242\357\342\203w\360fo\223\204f\242\343",
  "\212 \232\230ru\307\242w\360fo\223\204f\242\314\343",
  "\232\230ru\307\222\203\303\322na\207\336\371\262",
  "\232\230ru\307\222\203\263\364\250t\240 \270t\262",
  "\305\237od\311p \213\204\357\342\203\227gn\226u\221\203\303\241\200new-\230y\370\366\200\232\357\334\216\262",
  "\263s\264cif\224\315\350\233\227\202\203\332bo\373\366\200\213\204na\305\012",
  "\250\264\307\231\366\200\250\324\273\202\012",
  "f\320ly-qu\215i\335\231nam\345 \277\271o l\202g\317wo\320\204\322tr\243\226\231\271\344",
  "\223\250\264\307\231\271k\214\317\250\264\307\231\305\237o\204\242pr\352\261\012",
  "\250\264\307\231\042na\207ve\355\242\042get\042\012",
  "\314f\242\314\215\221ad\224\250i\230\262",
  "pr\352t\224gett\211\203\263accep\201\250t\240 \270t\262",
  "\314\303\364\237\200sam\200\221tur\340\366\200\360pr\352t\224\314(\210\235",
  "\263mix \305\237od\311p\203\213\204\357\342s\331\351\373\205h\211it\213c\353",
  "\263\321\211c\200\371\203\271 \251ue\262",
  "\263\321\211c\200objec\201\366\200\314\271 n\202-objec\201\366\200\343",
  "\263\321\211c\200n\202-objec\201\366\200\314\271 objec\201\366\200\343",
  "\263\321\211c\200\223\221l\226\231objec\201\261\264\203\314\213\204\343",
  "\366\200mis\376 (\314\213\204\210\235",
  "\263\241\200\362objec\201\372\252m\320\207-\374s\365e\307\222\012",
  "\260y\203\206\200\225supp\222t\231\360\221tur\340\261\264\262",
  "\263mix \221f\211\214c\200\213\204\315\261\264\262",
  "\313s\201w\360s\264ci\335\231t\351c\353",
  "\321\320\204\225\272\204\366\345\012"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\263\221a\204from \335le:\344",
  "\263writ\200\271 \335le:\344",
  "t\276\200ov\211flow:\344",
  "\205suf\335ci\214\201\305m\222y\012",
  "\310\342se\236l\267\205\230ruc\216\344",
  "num\211ic ov\211flow\317\250ce\312\375capaci\261\012",
  "\321mpil\231scrip\201\250ce\312\203\237\200\311ximum \305m\222\224\367\200(%l\204bytes\235",
  "\271o m\213\224\211r\242\305ssag\331\332\202\200l\205\353",
  "\321\232pag\200\311pp\375\335\370\225fo\223d\012",
  "\310p\226h:\344",
  "\342s\211\244fail\312: \343",
  "\241\267\211r\222: \343"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\316 \277tr\243\226\231\271 %\204\274\334\307\211\262",
  "\221\333i\244\325\361\213t/\311cro \356",
  "nu\236\267\325\270t\203do\331\225\376 \333i\216\012",
  "\255 \277nev\267\241\312:\344",
  "\255 \277a\273gn\231\252\251u\200\237a\201\277nev\267\241\312:\344",
  "\221d\223d\213\201\321\232: \361\213\201\250\324\273\332\277z\211o\012",
  "\221d\223d\213\201te\230: \361\213\201\250\324\273\332\277n\202-z\211o\012",
  "\223k\212w\340#p\240g\311\012",
  "\301\351\373\374\221s\320\201\241\231bef\222\200\333i\216\317f\222c\375\221p\206s\353",
  "\371\234 sho\320\204\221tur\340\252\251u\353",
  "po\273\245\200\241\200\325\255 bef\222\200\205i\207\215iza\216:\344",
  "po\273\245\224\223\205t\214d\231a\273gn\233t\012",
  "po\273\245\224\223\205t\214d\231bit\351s\200\352a\216\012",
  "\374mis\376\012",
  "po\273\245\224\252\042\361\355\315\337w\360\205t\214\232d:\344",
  "\250\324\273\332\304\203\212 effe\307\012",
  "ne\230\231\321m\233t\012",
  "loos\200\205d\214\330\216\012",
  "\247\204\230y\370pro\271\261\264\203\241\231\351\373\341\216\363semic\247umn\262",
  "loc\363\327\345 s\304dow\203\252\327\200a\201\252\324c\312\375lev\365\012",
  "\250\324\273\332\351\373\374ov\211rid\200\303ap\264\206 betwe\214 p\206\214\237ese\262",
  "lab\365 nam\345 s\304dow\203\374na\305\012",
  "nu\236\267\325\350git\203\250ce\312\203\240\216\363nu\236\267\324ci\227\202\012",
  "\221d\223d\213\201\042\367e\306\042: \337\367\200\277\215way\2031 \356",
  "\205\232t\211m\205\226\200\315\367\200\372\042\367e\306\355\250\324\273\332\356",
  "\223\221a\274\276\200\321\232\012",
  "\252\327\200\277a\273gn\231\271 its\365f \356",
  "m\222\200\205i\207\215iz\211\203\237\362\214um \335\365d\262",
  "l\214g\373\325\205i\207\215iz\267\250ce\312\203\367\200\325\237\200\214um \335\365d\012",
  "\205\232x \374mis\376 \356",
  "\212 imple\233\330\244f\242\346\345 \372\371\234\317\212 f\215l-back\012",
  "\346\200s\264ci\335ca\244\332f\222w\206\204\232\357\334\244\277ig\212\221d\012",
  "outpu\201\335\370\277writt\214\317bu\201\351\373\321mpac\201\214\321d\375\350s\276\312\012",
  "\346\200\327\345 s\304dow\203\252glob\363\327\353",
  "\316 \277m\206k\231\360\232\324c\226\312: \343",
  "pu\245ic \301lack\203f\222w\206\204\232\357\334\244\356",
  "\223k\212w\340p\334\305t\267\372subs\207tu\244(\205c\222\221c\201#\333\200p\226t\211n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
