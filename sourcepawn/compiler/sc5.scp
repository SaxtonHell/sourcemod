/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {100,32}, {105,110}, {97,114}, {116,105}, {101,114}, {37,115}, {110,111}, {97,110}, {135,130}, {114,101}, {101,110}, {97,108},
  {117,110}, {111,114}, {34,137}, {146,34}, {121,32}, {138,129}, {115,105}, {115,116}, {101,132}, {97,116}, {100,101}, {109,142}, {32,147}, {116,104}, {41,10}, {109,98},
  {117,115}, {114,97}, {144,99}, {145,32}, {98,108}, {162,140}, {102,165}, {101,120}, {97,32}, {116,121}, {99,139}, {118,143}, {112,101}, {111,108}, {170,149}, {115,121},
  {175,159}, {136,32}, {134,161}, {176,173}, {115,10}, {103,32}, {116,111}, {115,150}, {103,117}, {105,132}, {184,155}, {134,186}, {160,129}, {44,32}, {97,164}, {109,188},
  {102,133}, {171,185}, {99,104}, {99,116}, {105,131}, {166,32}, {133,193}, {104,97}, {111,102}, {117,108}, {98,128}, {109,101}, {97,140}, {178,148}, {110,32}, {109,97},
  {101,100}, {99,111}, {101,131}, {99,130}, {37,131}, {118,134}, {112,141}, {179,156}, {200,32}, {105,190}, {213,217}, {111,112}, {137,10}, {130,32}, {99,108}, {118,128},
  {187,129}, {154,192}, {102,105}, {119,105}, {112,128}, {97,131}, {219,136}, {169,172}, {116,97}, {115,101}, {169,228}, {100,105}, {108,128}, {156,10}, {109,153}, {151,153},
  {218,128}, {139,132}, {215,158}, {199,223}, {97,115}, {40,242}, {116,117}, {150,122}, {101,10}, {211,151}, {34,32}, {133,32}, {138,32}, {139,32}, {143,32}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method or property %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style type declarations\n",
/*121*/  "cannot specify array dimensions on both type and name\n",
/*122*/  "expected type expression\n",
/*123*/  "fully-qualified name \"%s\" is too long, would be truncated to \"%s\"\n",
/*124*/  "unexpected token, expected method or property\n",
/*125*/  "expected \"native\", \"get\", or \"set\"\n",
/*126*/  "%s for %s already exists\n",
/*127*/  "property getters cannot accept extra arguments\n",
/*128*/  "%s must have the same return type as property %s (%s)\n",
/*129*/  "cannot mix methodmaps and classes with inheritance\n",
/*130*/  "cannot coerce functions to values\n",
/*131*/  "cannot coerce object type %s to non-object type %s\n",
/*132*/  "cannot coerce non-object type %s to object type %s\n",
/*133*/  "cannot coerce unrelated object types %s and %s\n",
/*134*/  "type mismatch (%s and %s)\n",
/*135*/  "cannot use an object in a multi-tag selector\n",
/*136*/  "arrays are not supported as return types\n",
/*137*/  "cannot mix reference and array types\n",
/*138*/  "const was specified twice\n",
/*139*/  "could not find type \"%s\"\n",
/*140*/  "new-style array types cannot specify dimension sizes as part of their type\n",
/*141*/  "natives, forwards, and public functions cannot return arrays\n",
/*142*/  "invalid type declaration\n",
/*143*/  "new-style declarations should not have \"new\"\n",
/*144*/  "void cannot be used as a variable type\n",
/*145*/  "invalid type expression\n",
/*146*/  "#pragma newdecls must be required or optional\n",
/*147*/  "new-style declarations are required\n",
/*148*/  "cannot assign null to a non-nullable type\n",
/*149*/  "no getter found for property %s\n",
/*150*/  "setter must take exactly one extra argument with type %s\n",
/*151*/  "setter must return void\n",
/*152*/  "no setter found for property %s\n",
/*153*/  "cannot use non-public functions as callbacks\n",
/*154*/  "cannot assign INVALID_FUNCTION to a non-function type\n",
/*155*/  "expected newline, but found '%s'\n",
#else
  "\247\254\303\230\266k\216:\234\275bu\201fo\220\204\223\012",
  "\202l\224\250s\205g\354\357e\233\201(\243\247\326\267\202) \252 f\255low ea\302 \042ca\351\042\012",
  "\232\336\206\314 \330\250loc\376\360\277ap\254\206 \373\250\321mpo\220\204\244ock\012",
  "\246\234 \304\225imple\233t\320\012",
  "\305\317\224\225\363\273t\264",
  "\277\312a\267gn\230\266 \375\262y\012",
  "\346\231\243\256\312\215\341\320\012",
  "\277\312\250\371\213\201\247\326\267\202; \364sum\230z\210o\012",
  "\306\315\367\200(nega\207ve\275z\210o \243ou\201\330bo\220ds\236",
  "\306\305\243\232\336\206\314\012",
  "\306out\226d\200\246\264",
  "\306\305c\217l\275\225\250\301add\215s\264",
  "\374\216tr\224po\205\201(\374pu\244ic \246s\236",
  "\306\357e\233t; \225\373s\343t\302\012",
  "\042\232fa\311t\372c\364\200\277\312\235\200l\364\201c\364\200\373s\343t\302 \357e\233t\012",
  "m\311\207p\354\232fa\311t\203\373\042s\343t\302\042\012",
  "\220\341\230\327\012",
  "\205i\207\217iz\314 d\231\250\247ce\320\203\232\336\206\230\367\370",
  "\225\250label:\355",
  "\306\263 nam\200\223\012",
  "\263 \217\215ad\224\341\320:\355",
  "\277\312l\253u\200(n\202-\371\213t\236",
  "\315a\267gn\233\201\277\312\226mp\354a\267gn\233t\012",
  "\042b\215ak\372\243\042\323t\205ue\372\304ou\201\330\323t\247t\012",
  "\305head\205\265\353ff\210\203from pro\266\347\012",
  "\374\356\302\205\265\042#if...\042\012",
  "\306\302\206a\303\261\371\213t\012",
  "\306subscrip\201(\225\375\315\243\266o m\213\224subscripts):\355",
  "\306\247\326\267\202\275\364sum\230z\210o\012",
  "\321mpo\220\204\357e\233\201\225\336os\230a\201\235\200\216\204\330\342\354(\227\206t\230a\201l\205\200%d\236",
  "\220k\212w\316\353\215c\207v\370",
  "\315\205\232x ou\201\330bo\220d\203(\360\223\236",
  "\315\277\312\205\232x\230(\360\223\236",
  "\340do\322\225\363\250\232fa\311\201\253u\200(\340%d\236",
  "\340\352mis\356\302 (\340%d\236",
  "empt\224\357e\233t\012",
  "\306\227r\205\265(po\267\244\224n\202-t\210m\205\231\230\227r\205g\236",
  "\247t\241 \302\206a\303\210\203\335l\205\370",
  "\371\213\201\263 \307\203\374\367\370",
  "duplic\231\200\042ca\351\372label (\253u\200%d\236",
  "\306ellip\226s\275\315\367\200\304\225k\212wn\012",
  "\306\321\237\205\314 \330\336\364\203s\254ci\342\210\264",
  "\302\206a\303\261\371\213\201\247ce\320\203r\213g\200f\243pack\230\227r\205g\012",
  "po\226\214\376p\206a\313t\210\203\277\326c\320\200\217l nam\230p\206a\313t\210\264",
  "\266o m\213\224\305\273t\264",
  "\220k\212w\316\315\367\200(\360\223\236",
  "\315\367\322do \225\356\302\275\243\232\227\205\314 \315\304\266o sm\217l\012",
  "\315(\203do \225\356\302\012",
  "\306l\205\200\323t\205u\314\012",
  "\306r\213g\370",
  "\306subscript\275\240\200\042[ ]\372\346\231\221\203\335\317j\243\353\233\226\202\264",
  "m\311\207-\353\233\226\202\376\262y\203\277\312f\311l\224\205i\207\217iz\320\012",
  "\247ce\320\205\265\317ximum nu\237\261\330\353\233\226\202\264",
  "\220\356\302\230\336os\205\265b\241c\200(\042}\042\236",
  "\227\206\201\330\305bod\224\343\235ou\201\305head\210\012",
  "\262ys\275loc\376\332\322\361\305\273t\203\256\312pu\244ic (\360\223\236",
  "\220\300ish\230\247\326\267\335bef\221\200\321mpil\261\353\215c\207v\370",
  "duplic\231\200\273t; sam\200\340\304p\364s\230t\343c\370",
  "\305\340\317\224\225\363\250\232fa\311\201\253u\200(\360\223\236",
  "m\311\207p\354\042#el\351\372\353\215c\207v\322betwe\216 \042#if ... #\216\353f\042\012",
  "\042#el\351if\372\353\215c\207\337f\255low\203\375\042#el\351\372\353\215c\207v\370",
  "nu\237\261\330\346\213d\203do\322\225\342\201\235\200\346\231\221\012",
  "\305\215s\311\201\350\265\330\346\231\221\234 \277\312\223\012",
  "\256\302\213g\200\326\341\230\346\231\221\264",
  "\305\340\317\224\202l\224\363\250s\205g\354\350\265(\340%d\236",
  "\305\340\317\224\225\312\250\215f\210\216c\200\340\243\375\315(\340\223\236",
  "\360\256\312bo\235 \250\215f\210\216c\200\361\375\315(\360\223\236",
  "\306\241\214\376nu\237\261\326ci\226\335\373#p\241g\317\012",
  "\241\214\376nu\237\261f\221\317\201\217\215ad\224\341\320\012",
  "\241\214\376nu\237\261supp\221\201w\345\225\216\276\320\012",
  "\240\210-\341\230\346\231\243\277\312\232\336\206\230bef\221\200\240\200(\246\234\236",
  "\042\367e\310\372\346\231\243\304\306\335\042\246\372\263\264",
  "\305\340\277\312\375\315(\340\223\236",
  "#\341\200p\231t\210\316\277\227\206\201\343\235 \375\217p\307be\207c \302\206a\303\210\012",
  "\205pu\201l\205\200\266o l\202\265(aft\261subs\207\366\214s\236",
  "\257n\350x \210r\243\373\235\200\247\326\267\202\275\243\306\305c\217l\012",
  "m\217f\221m\230UTF-8 \216\321d\205g\275\243c\221rupt\230\342le: \334",
  "\305\240\322bo\235 \042\215\366rn\372\361\042\215\366r\316<\253ue>\042\012",
  "\205\323\226\227\216\201\215\366r\316\347\203(\315& n\202-\262y\236",
  "\220k\212w\316\263\275\243\225\250\371\213\201\263 \365",
  "\256\350k\200\250\350\265\345\250\232fa\311\201\253u\200f\243\375\205\232x\230\315p\206a\313t\261\365",
  "\240\210-\341\230\346\231\221\203\361na\207\337\246\203\317\224\225\363\357e\264",
  "\250\305\243\360\317\224\202l\224bel\202\265\266 \250s\205g\354au\266\356\335\365",
  "\357\200\323fli\303: \202\200\330\235\200\357\322\304\217\215ad\224a\267gn\230\266 a\212\235\261imple\233t\314 \365",
  "\374\357\322\206\200\341\230f\243\327\012",
  "\220k\212w\316au\266\356\202\355",
  "\220k\212w\316\357\200\223 f\243au\266\356\202\355",
  "pu\244ic \332\322\361loc\376\332\322\317\224\225\363\357\322\365",
  "\357\200\332\322\317\224\225\312\205i\207\217iz\230\365",
  "pu\244ic \246\203\317\224\225\215\366r\316\262y\203\365",
  "a\237i\270ou\203\371\213t; \350\265ov\210rid\200\304\215qui\215\204\365",
  "nu\237\261\330\273t\203do\322\225\356\302 \341i\214\012",
  "\247\254\303\230\350\265nam\200id\216\207\342\210\012",
  "\305\216um\210\314 \215qui\215\203\220iqu\200\350g\012",
  "\256\363\215qui\215\204p\206a\313t\210\203aft\261\333\214\376p\206a\313t\210\264",
  "\321\311\204\225\300\204\313\237\210\234 \373\227ruc\201\223\012",
  "\327 do\322\225\363\250\356\302\205\265\347\012",
  "\352\223 sho\311\204\312\223 \373new-\227y\354\232\336\206\314\264",
  "\324sho\311\204\225\363\375\247plici\201\215\366r\316\347\012",
  "\305pro\266\347\203do \225\356\302\012",
  "s\254cif\224ei\235\261\217l \353\233\226\202\203\243\202l\224\235\200l\364\201\353\233\226\202\012",
  "\256\300\204\324\334",
  "\324w\345\217\215ad\224\341\230\335\235\304\334",
  "\256\300\204\213\224\313\235od\203f\243\334",
  "\256\300\204\313\235o\204\243pr\346t\224\211.\334",
  "\256c\217l \313\235od\203\335\375\262y\012",
  "\256c\217l \313\235od\203\335\250\246\012",
  "\313\235o\204\277\363\250\342rs\201\340\321mpa\207\244\200\343\235 \235\200\324\352(\211\236",
  "\324nam\200\277\227\206\201\343\235 \375upp\210c\364\200lett\210\012",
  "\324\307\203\217\215ad\224be\216 \341\230(\326vio\240l\224\351\216 \345\211\236",
  "\247\254\303\230id\216\207\342\261- d\271you f\221ge\201\250\347?\012",
  "\371ru\303\243\305\277\215\366r\316\350\265\334",
  "\256\341\200\371ru\303\243f\221\234; \217\215ad\224\247i\227\203\345\250\334",
  "miss\205\265\347\275\243\324\277\363\235\200sam\200nam\200\345\324\223\012",
  "\256\240\200\232lete\275\324\324\307\203\374\232\227ru\303\221\012",
  "\374\313\235od\317p \243\336\364\203w\345fo\220\204f\243\334",
  "\374\232\227ru\303\243w\345fo\220\204f\243\324\334",
  "\232\227ru\303\221\203\277\312na\207\337\246\264",
  "\232\227ru\303\221\203\256\363\247t\241 \273t\264",
  "\313\235od\317p \361\336\364\203\226gn\231u\215\203\277\240\200new-\227y\354\352\232\336\206\314\264",
  "\256s\254cif\224\315\353\233\226\202\203\335bo\235 \352\361na\313\012",
  "\247\254\303\230\352\247\326\267\202\012",
  "f\311ly-qu\217i\342\230nam\200\223 \304\266o l\202g\275wo\311\204\312tr\242\231\230\266\355",
  "\220\247\254\303\230\266k\216\275\247\254\303\230\313\235o\204\243pr\346\251\012",
  "\247\254\303\230\042na\207ve\042\275\042get\042\275\243\042\351t\042\012",
  "\324f\243\324\217\215ad\224\247i\227\264",
  "pr\346t\224gett\210\203\256accep\201\247t\241 \273t\264",
  "\324\277\363\235\200sam\200\215\366r\316\352\345pr\346t\224\324(\211\236",
  "\256mix \313\235od\317p\203\361\336\364s\322\343\235 \205h\210it\213c\370",
  "\256\321\210c\200\246\203\266 \253ue\264",
  "\256\321\210c\200objec\201\352\324\266 n\202-objec\201\352\334",
  "\256\321\210c\200n\202-objec\201\352\324\266 objec\201\352\334",
  "\256\321\210c\200\220\215l\231\230objec\201\347\203\324\361\334",
  "\352mis\356\302 (\324\361\211\236",
  "\256\240\200\375objec\201\373\250m\311\207-\350\265\351le\303\221\012",
  "\262y\203\206\200\225supp\221t\230\345\215\366r\316\347\264",
  "\256mix \215f\210\216c\200\361\315\347\264",
  "\323s\201w\345s\254ci\342\230t\343c\370",
  "\321\311\204\225\300\204\352\223\012",
  "new-\227y\354\315\347\203\256s\254cif\224\353\233\226\335\367\322\345p\206\201\330\235eir \347\012",
  "na\207ves\275f\221w\206ds\275\361pu\244ic \246\203\256\215\366r\316\262y\264",
  "\306\352\232\336\206\314\012",
  "new-\227y\354\232\336\206\314\203sho\311\204\225\363\042new\042\012",
  "vo\271\256\312\240\230\345\250\360\347\012",
  "\306\352\247\326\267\202\012",
  "#p\241gm\250new\232\336\203\277\312\215qui\215\204\243\333\214\217\012",
  "new-\227y\354\232\336\206\314\203\206\200\215qui\215d\012",
  "\256a\267g\316n\311l \266 \250n\202-n\311l\276\200\347\012",
  "\374gett\261fo\220\204f\243pr\346t\224\334",
  "\351tt\261\277\350k\200\247a\303l\224\202\200\247t\241 \340\343\235 \352\334",
  "\351tt\261\277\215\366r\316void\012",
  "\374\351tt\261fo\220\204f\243pr\346t\224\334",
  "\256\240\200n\202-pu\244ic \246\203\345c\217lback\264",
  "\256a\267g\316INVALID_FUNCTION \266 \250n\202-\305\347\012",
  "\247\254\303\230newl\205e\275bu\201fo\220\204'\211'\012"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\256\215a\204from \342le:\355",
  "\256writ\200\266 \342le:\355",
  "t\276\200ov\210flow:\355",
  "\205suf\342ci\216\201\313m\221y\012",
  "\306\364\351\237l\261\205\227ruc\214\355",
  "num\210ic ov\210flow\275\247ce\320\205\265capaci\251\012",
  "\321mpil\230scrip\201\247ce\320\203\235\200\317ximum \313m\221\224\367\200(%l\204bytes\236",
  "\266o m\213\224\210r\243\313ssag\322\335\202\200l\205\370",
  "\321\232pag\200\317pp\205\265\342\354\225fo\220d\012",
  "\306p\231h:\355",
  "\364s\210\214 fail\320: \334",
  "\240\261\210r\221: \334"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n",
/*237*/  "coercing functions to and from primitives is unsupported and will be removed in the future\n",
#else
  "\327 \304tr\242\231\230\266 %\204\302\206a\303\210\264",
  "\215\341i\214 \330\371\213t/\317cro \365",
  "nu\237\261\330\273t\203do\322\225\356\302 \341i\214\012",
  "\263 \304nev\261\240\320:\355",
  "\263 \304a\267gn\230\250\253u\200\235a\201\304nev\261\240\320:\355",
  "\215d\220d\213\201\321\232: \371\213\201\247\326\267\335\304z\210o\012",
  "\215d\220d\213\201te\227: \371\213\201\247\326\267\335\304n\202-z\210o\012",
  "\220k\212w\316#p\241g\317\012",
  "\305\343\235 \350\265\215s\311\201\240\230bef\221\200\341i\214\275f\221c\205\265\215p\206\351\012",
  "\246\234 sho\311\204\215\366r\316\250\253u\370",
  "po\267\244\200\240\200\330\263 bef\221\200\205i\207\217iz\314:\355",
  "po\267\244\224\220\205t\216d\230a\267gn\233t\012",
  "po\267\244\224\220\205t\216d\230bit\343s\200\346\314\012",
  "\350\265mis\356\302\012",
  "po\267\244\224\250\042\371\372\315\340w\345\205t\216\232d:\355",
  "\247\326\267\335\307\203\374effe\303\012",
  "ne\227\230\321m\233t\012",
  "loos\200\205d\216t\314\012",
  "\255\204\227y\354pro\266\347\203\240\230\343\235 \333\214\376\351mic\255umn\264",
  "loc\376\360\223 s\307dow\203\250\360a\201\250\326c\320\205\265level\012",
  "\247\326\267\335\343\235 \350\265ov\210rid\200\277ap\254\206 betwe\216 p\206\216\235e\351\264",
  "label nam\200\223 s\307dow\203\350\265na\313\012",
  "nu\237\261\330\353git\203\247ce\320\203\241\214\376nu\237\261\326ci\226\202\012",
  "\215d\220d\213\201\042\367e\310\042: \340\367\200\304\217way\2031 \365",
  "\205\232t\210m\205\231\200\315\367\200\373\042\367e\310\372\247\326\267\335\365",
  "\220\215a\302\276\200\321\232\012",
  "\250\360\304a\267gn\230\266 it\351lf \365",
  "m\221\200\205i\207\217iz\210\203\235\375\216um \342eld\264",
  "l\216g\235 \330\205i\207\217iz\261\247ce\320\203\367\200\330\235\200\216um \342eld\012",
  "\205\232x \350\265mis\356\302 \365",
  "\374imple\233t\314 f\243\357\200\223 \373\246\234\275\374f\217l-back\012",
  "\357\200s\254ci\342c\314 \335f\221w\206\204\232\336\206\314 \304ig\212\215d\012",
  "outpu\201\342\354\304writt\216\275bu\201\343\235 \321mpac\201\216\321d\205\265\353s\276\320\012",
  "\357\200\360\223 s\307dow\203\250glob\376\332\370",
  "\327 \304m\206k\230\345\232\326c\231\320: \334",
  "pu\244ic \305lack\203f\221w\206\204\232\336\206\314 \365",
  "\220k\212w\316p\206a\313t\261\373subs\207\366\214 (\205c\221\215c\201#\341\200p\231t\210n\236",
  "\321\210c\205\265\246\203\266 \361from primi\207v\322\304\220supp\221t\230\361\343ll \312\215mov\230\373\235\200fu\366\215\012"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
