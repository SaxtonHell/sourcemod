/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {100,32}, {97,114}, {105,110}, {116,105}, {101,114}, {37,115}, {110,111}, {97,110}, {101,110}, {135,130}, {97,108}, {114,101},
  {117,110}, {111,114}, {34,137}, {146,34}, {121,32}, {138,129}, {115,105}, {115,116}, {100,101}, {97,116}, {101,132}, {109,140}, {32,147}, {41,10}, {109,98}, {116,104},
  {117,115}, {114,97}, {145,32}, {144,99}, {98,108}, {163,141}, {102,165}, {101,120}, {97,32}, {116,121}, {99,139}, {118,142}, {111,108}, {169,112}, {170,149}, {115,121},
  {175,158}, {136,32}, {133,161}, {176,172}, {115,10}, {115,150}, {103,32}, {116,111}, {103,117}, {105,132}, {184,155}, {133,186}, {160,129}, {97,164}, {109,188}, {101,131},
  {102,134}, {101,10}, {44,32}, {171,185}, {99,104}, {166,32}, {134,195}, {104,97}, {111,102}, {117,108}, {99,116}, {105,131}, {98,128}, {97,141}, {178,148}, {110,32},
  {109,97}, {101,100}, {167,112}, {99,130}, {37,131}, {118,133}, {179,156}, {200,32}, {105,189}, {213,216}, {109,101}, {99,111}, {111,112}, {137,10}, {130,32}, {99,108},
  {118,128}, {187,129}, {152,192}, {102,105}, {97,131}, {173,128}, {220,136}, {116,97}, {100,105}, {119,105}, {97,115}, {108,128}, {156,10}, {109,153}, {151,153}, {217,128},
  {214,157}, {199,224}, {40,240}, {150,122}, {211,151}, {34,32}, {138,32}, {139,32}, {142,32}, {159,32}, {110,97}, {115,101}, {116,117}, {139,132}, {210,143}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method or property %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style type declarations\n",
/*121*/  "cannot specify array dimensions on both type and name\n",
/*122*/  "expected type expression\n",
/*123*/  "fully-qualified name \"%s\" is too long, would be truncated to \"%s\"\n",
/*124*/  "unexpected token, expected method or property\n",
/*125*/  "expected \"native\", \"get\", or \"set\"\n",
/*126*/  "%s for %s already exists\n",
/*127*/  "property getters cannot accept extra arguments\n",
/*128*/  "%s must have the same return type as property %s (%s)\n",
/*129*/  "cannot mix methodmaps and classes with inheritance\n",
/*130*/  "cannot coerce functions to values\n",
/*131*/  "cannot coerce object type %s to non-object type %s\n",
/*132*/  "cannot coerce non-object type %s to object type %s\n",
/*133*/  "cannot coerce unrelated object types %s and %s\n",
/*134*/  "type mismatch (%s and %s)\n",
/*135*/  "cannot use an object in a multi-tag selector\n",
/*136*/  "arrays are not supported as return types\n",
/*137*/  "cannot mix reference and array types\n",
/*138*/  "const was specified twice\n",
/*139*/  "could not find type \"%s\"\n",
/*140*/  "new-style array types cannot specify dimension sizes as part of their type\n",
/*141*/  "natives, forwards, and public functions cannot return arrays\n",
/*142*/  "invalid type declaration\n",
/*143*/  "new-style declarations should not have \"new\"\n",
/*144*/  "void cannot be used as a variable type\n",
/*145*/  "invalid type expression\n",
/*146*/  "#pragma newdecls must be required or optional\n",
/*147*/  "new-style declarations are required\n",
/*148*/  "cannot assign null to a non-nullable type\n",
/*149*/  "no getter found for property %s\n",
/*150*/  "setter must take exactly one extra argument with type %s\n",
/*151*/  "setter must return void\n",
/*152*/  "no setter found for property %s\n",
/*153*/  "cannot use non-public functions as callbacks\n",
/*154*/  "cannot assign INVALID_FUNCTION to a non-function type\n",
#else
  "\322e\312\232\267k\214:\234\302bu\201fo\220\204\223\012",
  "\202l\224\250s\206g\353\356e\233\201(\242\376\265\202) \252 f\254low ea\304 \042c\352e\042\012",
  "\230\337\205\315 \327\250loc\370\357\276appe\205 \206 \250\333mpo\220\204\244ock\012",
  "\246\234 \313\225imple\233t\321\012",
  "\305\320\224\225\361\273t\264",
  "\276\314a\265gn\232\267 \367\262y\012",
  "\346\231\242\256\314\217\342\321\012",
  "\276\314\250\364\213\201\376\265\202; \352sum\232z\210o\012",
  "\306\316\363\200(nega\207ve\302z\210o \242ou\201\327bo\220ds\235",
  "\306\305\242\230\337\205\315\012",
  "\306out\226d\200\246\264",
  "\306\305c\216l\302\225\250\303add\217s\264",
  "\366\214tr\224po\206\201(\366pu\244ic \246s\235",
  "\306\356e\233t; \225\206 s\351t\304\012",
  "\042\230fa\311t\365c\352\200\276\314\237\200l\352\201c\352\200\206 s\351t\304 \356e\233t\012",
  "m\311\207p\353\230fa\311t\203\206 \042s\351t\304\042\012",
  "\220\342\232\326\012",
  "\206i\207\216iz\315 d\231\250\247ce\321\203\230\337\205\232\363\301",
  "\225\250label:\354",
  "\306\263 \372m\200\223\012",
  "\263 \216\217ad\224\342\321:\354",
  "\276\314l\253u\200(n\202-\364\213t\235",
  "\316a\265gn\233\201\276\314\226mp\353a\265gn\233t\012",
  "\042b\217ak\365\242\042\323t\206ue\365\313ou\201\327\323t\247t\012",
  "\305head\206\266\350ff\210\203from pro\267\255\301",
  "\366\355\304\206\266\042#if...\042\012",
  "\306\304\205a\312\261\364\213t\012",
  "\306subscrip\201(\225\367\316\242\267o m\213\224subscripts):\354",
  "\306\376\265\202\302\352sum\232z\210o\012",
  "\333mpo\220\204\356e\233\201\225\337os\232a\201\237\200\214\204\327\343\353(\227\205t\232a\201l\206\200%d\235",
  "\220k\212w\317\350\217c\207v\301",
  "\316\206\230x ou\201\327bo\220d\203(\357\223\235",
  "\316\276\314\206\230x\232(\357\223\235",
  "\341do\277\225\361\250\230fa\311\201\253u\200(\341%d\235",
  "\341\345mis\355\304 (\341%d\235",
  "empt\224\356e\233t\012",
  "\306\227r\206\266(po\265\244\224n\202-t\210m\206\231\232\227r\206g\235",
  "\247t\241 \304\205a\312\210\203\336l\206\301",
  "\364\213\201\263 \307\203\366\363\301",
  "duplic\231\200\042c\352e\365label (\253u\200%d\235",
  "\306ellip\226s\302\316\363\200\313\225k\212wn\012",
  "\306\333\236\206\315 \327\337\352\203speci\343\210\264",
  "\304\205a\312\261\364\213\201\247ce\321\203r\213g\200f\242pack\232\227r\206g\012",
  "po\226\215\370p\205a\332t\210\203\276p\217c\321\200\216l \372m\232p\205a\332t\210\264",
  "\267o m\213\224\305\273t\264",
  "\220k\212w\317\316\363\200(\357\223\235",
  "\316\363\277do \225\355\304\302\242\230\227\206\315 \316\313\267o sm\216l\012",
  "\316(\203do \225\355\304\012",
  "\306l\206\200\323t\206u\315\012",
  "\306r\213g\301",
  "\306subscript\302\240\200\042[ ]\365\346\231\221\203\336\320j\242\350\233\226\202\264",
  "m\311\207-\350\233\226\202\370\262y\203\276\314f\311l\224\206i\207\216iz\321\012",
  "\247ce\321\206\266\320ximum nu\236\261\327\350\233\226\202\264",
  "\220\355\304\232\337os\206\266b\241c\200(\042}\042\235",
  "\227\205\201\327\305bod\224\351\237ou\201\305head\210\012",
  "\262ys\302loc\370\331\277\375\305\273t\203\256\314pu\244ic (\357\223\235",
  "\220\300ish\232\376\265\336bef\221\200\333mpil\261\350\217c\207v\301",
  "duplic\231\200\273t; sam\200\341\313p\352s\232t\351c\301",
  "\305\341\320\224\225\361\250\230fa\311\201\253u\200(\357\223\235",
  "m\311\207p\353\042#el\373\365\350\217c\207v\277betwe\214 \042#if ... #\214\350f\042\012",
  "\042#el\373if\365\350\217c\207\340f\254low\203\367\042#el\373\365\350\217c\207v\301",
  "nu\236\261\327\346\213d\203do\277\225\343\201\237\200\346\231\221\012",
  "\305\217s\311\201\347\266\327\346\231\221\234 \276\314\223\012",
  "\256\304\213g\200p\217\342\232\346\231\221\264",
  "\305\341\320\224\202l\224\361\250s\206g\353\347\266(\341%d\235",
  "\305\341\320\224\225\314\250\217f\210\214c\200\341\242\367\316(\341\223\235",
  "\357\256\314bo\371\250\217f\210\214c\200\375\367\316(\357\223\235",
  "\306\241\215\370nu\236\261p\217ci\226\336\206 #p\241g\320\012",
  "\241\215\370nu\236\261f\221\320\201\216\217ad\224\342\321\012",
  "\241\215\370nu\236\261supp\221\201w\344\225\214\275\321\012",
  "\240\210-\342\232\346\231\242\276\314\230\337\205\232bef\221\200\240\200(\246\234\235",
  "\042\363e\310\365\346\231\242\313\306\336\042\246\365\263\264",
  "\305\341\276\314\367\316(\341\223\235",
  "#\342\200p\231t\210\317\276\227\205\201\351\371\367\216p\307be\207c \304\205a\312\210\012",
  "\206pu\201l\206\200\267o l\202\266(aft\261subs\207\374\215s\235",
  "\257n\347x \210r\242\206 \237\200\376\265\202\302\242\306\305c\216l\012",
  "m\216f\221m\232UTF-8 \214\333d\206g\302\242c\221rupt\232\343le: \335",
  "\305\240\277bo\371\042\217\374rn\365\375\042\217\374r\317<\253ue>\042\012",
  "\206\323\226\227\214\201\217\374r\317\255\277(\316& n\202-\262y\235",
  "\220k\212w\317\263\302\242\225\250\364\213\201\263 \362",
  "\256\347k\200\250\347\266\344\250\230fa\311\201\253u\200f\242\367\206\230x\232\316p\205a\332t\261\362",
  "\240\210-\342\232\346\231\221\203\375\372\207\340\246\203\320\224\225\361\356e\264",
  "\250\305\242\357\320\224\202l\224bel\202\266\267 \250s\206g\353au\267\355\336\362",
  "\356\200\323fli\312: \202\200\327\237\200\356\277\313\216\217ad\224a\265gn\232\267 a\212\237\261imple\233t\315 \362",
  "\366\356\277\205\200\342\232f\242\326\012",
  "\220k\212w\317au\267\355\202\354",
  "\220k\212w\317\356\200\223 f\242au\267\355\202\354",
  "pu\244ic \331\277\375loc\370\331\277\320\224\225\361\356\277\362",
  "\356\200\331\277\320\224\225\314\206i\207\216iz\232\362",
  "pu\244ic \246\203\320\224\225\217\374r\317\262y\203\362",
  "a\236i\270ou\203\364\213t; \347\266ov\210rid\200\313\217qui\217\204\362",
  "nu\236\261\327\273t\203do\277\225\355\304 \342i\215\012",
  "\322e\312\232\347\266\372m\200id\214\207\343\210\012",
  "\305\214um\210\315 \217qui\217\203\220iqu\200\347g\012",
  "\256\361\217qui\217\204p\205a\332t\210\203aft\261\334\215\370p\205a\332t\210\264",
  "\333\311\204\225\300\204\332\236\210\234 \206 \227ruc\201\223\012",
  "\326 do\277\225\361\250\355\304\206\266\255\301",
  "\345\223 sho\311\204\314\223 \206 new-\227y\353\230\337\205\315\264",
  "\324sho\311\204\225\361\367\322lici\201\217\374r\317\255\301",
  "\305pro\267\255\277do \225\355\304\012",
  "specif\224ei\237\261\216l \350\233\226\202\203\242\202l\224\237\200l\352\201\350\233\226\202\012",
  "\256\300\204\324\335",
  "\324w\344\216\217ad\224\342\232\336\237\313\335",
  "\256\300\204\213\224\332\237od\203f\242\335",
  "\256\300\204\332\237o\204\242pr\346t\224\211.\335",
  "\256c\216l \332\237od\203\336\367\262y\012",
  "\256c\216l \332\237od\203\336\250\246\012",
  "\332\237o\204\276\361\250\343rs\201\341\333mpa\207\244\200\351\371\237\200\324\345(\211\235",
  "\324\372m\200\276\227\205\201\351\371\367upp\210c\352\200lett\210\012",
  "\324\307\203\216\217ad\224be\214 \342\232(p\217vio\240l\224\373\214 \344\211\235",
  "\322e\312\232id\214\207\343\261- d\271you f\221ge\201\250\255e?\012",
  "\364ru\312\242\305\276\217\374r\317\347\266\335",
  "\256\342\200\364ru\312\242f\221\234; \216\217ad\224\247i\227\203\344\250\335",
  "miss\206\266\255e\302\242\324\276\361\237\200sam\200\372m\200\344\324\223\012",
  "\256\240\200\230lete\302\324\324\307\203\366\230\227ru\312\221\012",
  "\366\332\237od\320p \242\337\352\203w\344fo\220\204f\242\335",
  "\366\230\227ru\312\242w\344fo\220\204f\242\324\335",
  "\230\227ru\312\221\203\276\314\372\207\340\246\264",
  "\230\227ru\312\221\203\256\361\247t\241 \273t\264",
  "\332\237od\320p \375\337\352\203\226gn\231u\217\203\276\240\200new-\227y\353\345\230\337\205\315\264",
  "\256specif\224\316\350\233\226\202\203\336bo\371\345\375\372m\301",
  "\322e\312\232\345\376\265\202\012",
  "f\311ly-qu\216i\343\232\372m\200\223 \313\267o l\202g\302wo\311\204\314tr\243\231\232\267\354",
  "\220\322e\312\232\267k\214\302\322e\312\232\332\237o\204\242pr\346\251\012",
  "\322e\312\232\042\372\207ve\042\302\042get\042\302\242\042\373t\042\012",
  "\324f\242\324\216\217ad\224\247i\227\264",
  "pr\346t\224gett\210\203\256accep\201\247t\241 \273t\264",
  "\324\276\361\237\200sam\200\217\374r\317\345\344pr\346t\224\324(\211\235",
  "\256mix \332\237od\320p\203\375\337\352s\277\351\371\206h\210it\213c\301",
  "\256\333\210c\200\246\203\267 \253ue\264",
  "\256\333\210c\200objec\201\345\324\267 n\202-objec\201\345\335",
  "\256\333\210c\200n\202-objec\201\345\324\267 objec\201\345\335",
  "\256\333\210c\200\220\217l\231\232objec\201\255\277\324\375\335",
  "\345mis\355\304 (\324\375\211\235",
  "\256\240\200\367objec\201\206 \250m\311\207-\347\266\373le\312\221\012",
  "\262y\203\205\200\225supp\221t\232\344\217\374r\317\255e\264",
  "\256mix \217f\210\214c\200\375\316\255e\264",
  "\323s\201w\344speci\343\232t\351c\301",
  "\333\311\204\225\300\204\345\223\012",
  "new-\227y\353\316\255\277\256specif\224\350\233\226\336\363\277\344p\205\201\327\237eir \255\301",
  "\372\207ves\302f\221w\205ds\302\375pu\244ic \246\203\256\217\374r\317\262y\264",
  "\306\345\230\337\205\315\012",
  "new-\227y\353\230\337\205\315\203sho\311\204\225\361\042new\042\012",
  "vo\271\256\314\240\232\344\250\357\255\301",
  "\306\345\376\265\202\012",
  "#p\241gm\250new\230\337\203\276\314\217qui\217\204\242\334\215\216\012",
  "new-\227y\353\230\337\205\315\203\205\200\217qui\217d\012",
  "\256a\265g\317n\311l \267 \250n\202-n\311l\275\200\255\301",
  "\366gett\261fo\220\204f\242pr\346t\224\335",
  "\373tt\261\276\347k\200\247a\312l\224\202\200\247t\241 \341\351\371\345\335",
  "\373tt\261\276\217\374r\317void\012",
  "\366\373tt\261fo\220\204f\242pr\346t\224\335",
  "\256\240\200n\202-pu\244ic \246\203\344c\216lback\264",
  "\256a\265g\317INVALID_FUNCTION \267 \250n\202-\305\255\301"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\256\217a\204from \343le:\354",
  "\256writ\200\267 \343le:\354",
  "t\275\200ov\210flow:\354",
  "\206suf\343ci\214\201\332m\221y\012",
  "\306\352\373\236l\261\206\227ruc\215\354",
  "num\210ic ov\210flow\302\247ce\321\206\266capaci\251\012",
  "\333mpil\232scrip\201\247ce\321\203\237\200\320ximum \332m\221\224\363\200(%l\204bytes\235",
  "\267o m\213\224\210r\242\332ssag\277\336\202\200l\206\301",
  "\333\230pag\200\320pp\206\266\343\353\225fo\220d\012",
  "\306p\231h:\354",
  "\352s\210\215 fail\321: \335",
  "\240\261\210r\221: \335"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\326 \313tr\243\231\232\267 %\204\304\205a\312\210\264",
  "\217\342i\215 \327\364\213t/\320cro \362",
  "nu\236\261\327\273t\203do\277\225\355\304 \342i\215\012",
  "\263 \313nev\261\240\321:\354",
  "\263 \313a\265gn\232\250\253u\200\237a\201\313nev\261\240\321:\354",
  "\217d\220d\213\201\333\230: \364\213\201\376\265\336\313z\210o\012",
  "\217d\220d\213\201te\227: \364\213\201\376\265\336\313n\202-z\210o\012",
  "\220k\212w\317#p\241g\320\012",
  "\305\351\371\347\266\217s\311\201\240\232bef\221\200\342i\215\302f\221c\206\266\217p\205s\301",
  "\246\234 sho\311\204\217\374r\317\250\253u\301",
  "po\265\244\200\240\200\327\263 bef\221\200\206i\207\216iz\315:\354",
  "po\265\244\224\220\206t\214\230\204a\265gn\233t\012",
  "po\265\244\224\220\206t\214\230\204bit\351s\200\346\315\012",
  "\347\266mis\355\304\012",
  "po\265\244\224\250\042\364\365\316\341w\344\206t\214\230d:\354",
  "\376\265\336\307\203\366effe\312\012",
  "ne\227\232\333m\233t\012",
  "loos\200\206d\214t\315\012",
  "\254\204\227y\353pro\267\255\277\240\232\351\371\334\215\370\373mic\254umn\264",
  "loc\370\357\223 s\307dow\203\250\357a\201\250p\217c\321\206\266level\012",
  "\376\265\336\351\371\347\266ov\210rid\200\276appe\205 betwe\214 p\205\214\237e\373\264",
  "label \372m\200\223 s\307dow\203\347\266\372m\301",
  "nu\236\261\327\350git\203\247ce\321\203\241\215\370nu\236\261p\217ci\226\202\012",
  "\217d\220d\213\201\042\363e\310\042: \341\363\200\313\216way\2031 \362",
  "\206\230t\210m\206\231\200\316\363\200\206 \042\363e\310\365\376\265\336\362",
  "\220\217a\304\275\200\333\230\012",
  "\250\357\313a\265gn\232\267 it\373lf \362",
  "m\221\200\206i\207\216iz\210\203\237\367\214um \343eld\264",
  "l\214g\371\327\206i\207\216iz\261\247ce\321\203\363\200\327\237\200\214um \343eld\012",
  "\206\230x \347\266mis\355\304 \362",
  "\366imple\233t\315 f\242\356\200\223 \206 \246\234\302\366f\216l-back\012",
  "\356\200speci\343c\315 \336f\221w\205\204\230\337\205\315 \313ig\212\217d\012",
  "outpu\201\343\353\313writt\214\302bu\201\351\371\333mpac\201\214\333d\206\266\350s\275\321\012",
  "\356\200\357\223 s\307dow\203\250glob\370\331\301",
  "\326 \313m\205k\232\344\230p\217c\231\321: \335",
  "pu\244ic \305lack\203f\221w\205\204\230\337\205\315 \362",
  "\220k\212w\317p\205a\332t\261\206 subs\207\374\215 (\206c\221\217c\201#\342\200p\231t\210n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
